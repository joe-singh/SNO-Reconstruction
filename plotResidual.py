"""A program that takes as input a directory containing root files. Outputs a
file whose name comes from user input (defaults to histograms.root) which stores
histograms generated by each root file in the directory. If this file exists
already then it replaces it. In addition it makes a folder called json_files if
this doesn't exist already and stores json files containing the parameters from
each input root file. If json_files exists it is replaced with a new empty copy."""

import  rat, ROOT, os, argparse, json, shutil
from ROOT import TCanvas,TH1F, Fit, TF1, TFile
from re import search

parser = argparse.ArgumentParser(description="Generate and save histograms for all root files in a directory.")
parser.add_argument("dir", help="Target directory with root files.")
parser.add_argument("filename", nargs='?', default="residuals.root", help="Optional: name of output file. Defaults to 'residuals.root'.")
args = parser.parse_args()

# Specify folder
ratFolder = args.dir
files_list = os.listdir(ratFolder)

# Get filenames without extension for use_input_pars later.
filenames = [filename.replace('.root', '') for filename in files_list if filename.endswith('.root')]

# Store files with appropriate path information for later use.
ratFiles = [ratFolder + "/" + ratFile for ratFile in files_list if ratFile.endswith(".root")]

# Create a new file to store all histograms
new_file = TFile(args.filename, 'update')

# Create a folder (if needed) to store json files.
directory = "json_files"
if not os.path.exists(directory):
    os.makedirs(directory)
# If json_files folder exists, delete and create a new one which is empty.
else:
    shutil.rmtree(directory)
    os.makedirs(directory)
    print("Replaced json folder\n")

def get_input_pars(filename):
    """A function that takes a root filename as input (of form x0y0z1ke2.5 for example)
    and returns the input parameters of the file for later use."""
    try:
        x_par = float(search(r'x([^y]*)', filename).group()[1:])
        y_par = float(search(r'y([^z]*)', filename).group()[1:])
        z_par = float(search(r'z([^k]*)', filename).group()[1:])
        ke_par = float(search(r'ke([^" "]*)', filename).group()[2:])
        return (x_par, y_par, z_par, ke_par)
    except AttributeError:
        print("Bad form for filename.")

for i in range(len(ratFiles)):
    print("Obtaining residuals for %s \n" % (filenames[i]))
    #Declare histograms
    print("Filling Histograms\n")
    Energy = TH1F("Energy %s" %(filenames[i]), "Fit Energy Dif", 250, -1, 1)
    X_Position = TH1F("X Position %s" %(filenames[i]), "Fit X Position Dif", 250, -500, 500 )
    Y_Position = TH1F("Y Position %s" %(filenames[i]), "Fit Y Position Dif", 250, -500, 500 )
    Z_Position = TH1F("Z Position %s" %(filenames[i]), "Fit Z Position Dif", 250, -500, 500 )

    #Loop over all events
    for ds, run in rat.dsreader(ratFiles[i]):
        #Get Monte Carlo part of evemt
        mc = ds.GetMC()
        #Loop over all reconstructed particles in event (possible more than MC)
        for iev in range(0, ds.GetEVCount()):
            #Get reconstructed part of event
            ev = ds.GetEV(iev)
            #Fill histograms
            Energy.Fill(mc.GetMCParticle(0).GetKineticEnergy()-ev.GetDefaultFitVertex().GetEnergy())
            X_Position.Fill(mc.GetMCParticle(0).GetPosition().X()-ev.GetDefaultFitVertex().GetPosition().X())
            Y_Position.Fill(mc.GetMCParticle(0).GetPosition().Y()-ev.GetDefaultFitVertex().GetPosition().Y())
            Z_Position.Fill(mc.GetMCParticle(0).GetPosition().Z()-ev.GetDefaultFitVertex().GetPosition().Z())

    # Create a new dictionary to store parameter values
    result_dictionary = {}
    # Access the original parameters for later use
    original_parameters = get_input_pars(filenames[i])

    #Add axis labels to histograms
    Energy.GetYaxis().SetTitle( "Counts ")
    Energy.GetXaxis().SetTitle( "True-Reco Energy [MeV] ")
    X_Position.GetYaxis().SetTitle( "Counts ")
    X_Position.GetXaxis().SetTitle( "True-Reco Position [mm] ")
    Y_Position.GetYaxis().SetTitle( "Counts ")
    Y_Position.GetXaxis().SetTitle( "True-Reco Position [mm] ")
    Z_Position.GetYaxis().SetTitle( "Counts ")
    Z_Position.GetXaxis().SetTitle( "True-Reco Position [mm] ")

    print("Applying fits\n")
    # Apply a gaussian fit to the data
    Energy_Fit = Energy.Fit("gaus")
    X_Fit = X_Position.Fit("gaus")
    Y_Fit = Y_Position.Fit("gaus")
    Z_Fit = Z_Position.Fit("gaus")

    # Declare fit functions to extract parameters later
    kefit = Energy.GetFunction("gaus")
    xfit = X_Position.GetFunction("gaus")
    yfit = Y_Position.GetFunction("gaus")
    zfit = Z_Position.GetFunction("gaus")

    # Uncomment to draw and divide a canvas to display histograms
    """canvas = TCanvas( "Energy and X Position File %s" %(filenames[i]), "Energy and X Position File %s" %(filenames[i]), 1200, 1200)
    canvas.Divide(2,1)
    canvas.cd(1)
    Energy.Draw()
    canvas.cd(2)
    X_Position.Draw()
    canvas.Update()
    canvas2 = TCanvas("Y Position, Z Position %s" %(filenames[i]), "Y Position, Z Position %s" %(filenames[i]), 1200, 1200)
    canvas2.Divide(2,1)
    canvas2.cd(1)
    Y_Position.Draw()
    canvas2.cd(2)
    Z_Position.Draw()
    canvas2.Update()"""

    new_file.Write()

    print("\nExtracting parameters")
    result_dictionary["x Pos"] = original_parameters[0]
    result_dictionary["y Pos"] = original_parameters[1]
    result_dictionary["z Pos"] = original_parameters[2]
    result_dictionary["ke"] = original_parameters[3]

    result_dictionary["ke Bias"] = kefit.GetParameter(1)
    result_dictionary["ke Bias Error"] = kefit.GetParError(1)
    result_dictionary["ke Resolution"] = kefit.GetParameter(2)
    result_dictionary["ke Resolution Error"] = kefit.GetParError(2)

    result_dictionary["x Bias"] = xfit.GetParameter(1)
    result_dictionary["x Bias Error"] = xfit.GetParError(1)
    result_dictionary["x Resolution"] = xfit.GetParameter(2)
    result_dictionary["x Resolution Error"] = xfit.GetParError(2)

    result_dictionary["y Bias"] = yfit.GetParameter(1)
    result_dictionary["y Bias Error"] = yfit.GetParError(1)
    result_dictionary["y Resolution"] = yfit.GetParameter(2)
    result_dictionary["y Resolution Error"] = yfit.GetParError(2)

    result_dictionary["z Bias"] = zfit.GetParameter(1)
    result_dictionary["z Bias Error"] = zfit.GetParError(1)
    result_dictionary["z Resolution"] = zfit.GetParameter(2)
    result_dictionary["z Resolution Error"] = zfit.GetParError(2)

    print("Writing to output\n")
    # Write data in result_dictionary to a json file
    with open(os.path.join(directory, filenames[i] + '.json'), 'w') as outfile:
        json.dump(result_dictionary, outfile)

    print("\n")

try:
    input("Press enter to close...")
except SyntaxError:
    pass
